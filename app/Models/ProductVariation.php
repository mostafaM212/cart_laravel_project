<?php

namespace App\Models;

use App\Cart\Money;
use App\Models\Collections\ProductVariationCollection;
use App\Models\Traits\HasPrice;
use Illuminate\Database\Eloquent\Model;

class ProductVariation extends Model
{
    use HasPrice ;
    protected $fillable=[
        'name','price','order'
    ];
    public function getPriceAttribute($value){
        if ($value === null){
            return $this->product->price ;
        }
        return new Money($value) ;
    }
    public function priceVaries(){
//        dd($this->product);

        return $this->price->amount() !== $this->product->price->amount() ;
    }

    public function inStock(){
        if ($this->stokeCount()>0){
            return true ;
        }
        return false ;
    }

    public function stokeCount(){
//        dd($this->stocks->sum('quantity'));
        $sum=$this->stocks->sum('quantity') ;
        if ($sum > 0 ){
            return $sum ;
        }
        return 0 ;
    }

   /*
         * takes the quantity that user need and compare it with quantity in stock
         * it returns the min value of them
         */
    public function minStock($count){

        return min($this->stokeCount(), $count ) ;
    }

    public function product(){
        return $this->belongsTo(Product::class) ;
    }


    public function type(){
        return $this->hasOne(ProductVariationType::class,'id','product_variation_type_id') ;
    }

    public function stocks(){
        return $this->hasMany(Stock::class) ;
    }

    public function variations(){
        return $this->belongsTo(Product::class) ;
    }

    public function orders(){
        return $this->belongsToMany(Order::class,'product_variation_order') ;
    }

    public function newCollection(array $models = [])
    {
        return new ProductVariationCollection($models) ; // TODO: Change the autogenerated stub
    }
}
